// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  avatarImg String?
  admin     Boolean
  barber Boolean @default(false)
  description String?
  bookings  Booking[] @relation(name: "UserBookings")  
  barberBookings Booking[] @relation(name: "BarberBookings")  
  accounts  Account[]
  sessions  Session[]
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Service {
  id       Int       @id @default(autoincrement())
  name     String
  duration Int
  price    Float
  combo     Boolean
  bookings Booking[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  serviceId Int
  barberId  Int?
  userId    Int
  date      DateTime
  service   Service  @relation(fields: [serviceId], references: [id])
  barber    User?   @relation(name: "BarberBookings", fields: [barberId], references: [id])
  user      User     @relation(name: "UserBookings", fields: [userId], references: [id])
}
